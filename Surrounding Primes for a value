We need a function prime_bef_aft() that gives the largest prime below a certain given value n,

befPrime or bef_prime (depending on the language),

and the smallest prime larger than this value,

aftPrime/aft_prime (depending on the language).

The result should be output in a list like the following:

primeBefAft == [befPrime, aftPrime]
If n is a prime number it will give two primes, n will not be included in the result.

Let's see some cases:

primeBefAft(100) == [97, 101]

primeBefAft(97) == [89, 101]

primeBefAft(101) == [97, 103]
Range for the random tests: 1000 <= n <= 200000

(The extreme and special case n = 2 will not be considered for the tests. Thanks Blind4Basics)





function primeBefAft(num) {
  var result = []

  function prime(num){
    for(var i=2;i<=parseInt(Math.sqrt(num));i++){
      if(num % i == 0) return false
    }
  return true
  }

var h = num
  if(prime(h)){
    h = h + 1
  }

var l = num
  if(prime(l)){
    l = l - 1
  }

while(!prime(l)) l--
  if(prime(l)) result.push(l)

  while(!prime(h)) h++
    if(prime(h)) result.push(h)

 return result
}



Tests used:

describe('primeBefAft', function(){
  it('returns the prime before and after n',function(){
    expect(primeBefAft(100)).toEqual([97, 101])
    expect(primeBefAft(97)).toEqual([89, 101])
    expect(primeBefAft(101)).toEqual([97, 103])
    })
  })
