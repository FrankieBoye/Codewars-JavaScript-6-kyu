Run-length encoding (RLE) is a very simple form of lossless data compression in which runs of data are stored as a single data value and count.

A simple form of RLE would encode the string "AAABBBCCCD" as "3A3B3C1D" meaning, first there are 3 A, then 3 B, then 3 C and last there is 1 D.

Your task is to write a RLE encoder and decoder using this technique. The texts to encode will always consist of only uppercase characters, no numbers.





    function encode(input) {
      var counter = 1
      var result = ""
        if(input == "") return ""
        for(var i=0;i<input.length;i++){
        if(input[i] == input[i+1]) {
        counter ++
        } else {
          result += counter + input[i]
          counter = 1
        }
      }
    return result
    }

    function decode(input) {
        var result = ""
        var counter = ""
        for(var i=0;i<input.length;i++){
          if(isNaN(input[i])){
            result += input[i].repeat(counter)
            counter = ""
          } else {
            counter += input[i]
          }
        }
        return result
      }
     
     
     
  Tests used:
    
  describe('encode', function(){
  it('uses RLE compression to encode',function(){
    expect(encode("")).toEqual("")
    expect(encode("AAA")).toEqual("3A")
    expect(encode("AB")).toEqual("1A1B")
    expect(encode("AAABBBCCCA")).toEqual("3A3B3C1A")
    })
  })
  
  describe('decode', function(){
    it('uses RLE compression to decode',function(){
      expect(decode("")).toEqual("")
      expect(decode("1A")).toEqual("A")
      expect(decode("1A1B")).toEqual("AB")
      expect(decode("3A3B3C1A")).toEqual("AAABBBCCCA")
      })
    }) 





Second attempt improved decode function:

function encode(input) {
  var counter = 1
  var result = ""
  for(var i=0;i<input.length;i++){
    if(input[i]==input[i+1]){
      counter++
    } else {
      result += counter+input[i]
      counter=1
    }
  }
  return result
}

function decode(input) {
  var result = ""
  var input = input.match(/[^\d]+|\d+/g)
  for(var i=0;i<input.length;i++){
    if(Number.isInteger(parseInt(input[i]))){
      result += input[i+1].repeat([input[i]])
    }
  }
  return result
}


Tests used:

describe('encode', function(){
  it('encodes strings',function(){
    expect(encode("A")).toEqual("1A")
    expect(encode("AAA")).toEqual("3A")
    expect(encode("AB")).toEqual("1A1B")
    expect(encode("AAABBBCCCA")).toEqual("3A3B3C1A")
    })
  })


  describe('decode', function(){
    it('decodes strings',function(){
      expect(decode("1A")).toEqual("A")
      expect(decode("3A")).toEqual("AAA")
      expect(decode("1A1B")).toEqual("AB")
      expect(decode("3A3B3C1A")).toEqual("AAABBBCCCA")
      expect(decode("10A1B")).toEqual("AAAAAAAAAAB")
      })
    })
